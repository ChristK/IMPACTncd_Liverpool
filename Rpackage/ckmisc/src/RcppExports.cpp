// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// meansd
List meansd(NumericVector x);
RcppExport SEXP ckmisc_meansd(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(meansd(x));
    return rcpp_result_gen;
END_RCPP
}
// fquantile
NumericVector fquantile(NumericVector x, NumericVector probs, bool na_rm);
RcppExport SEXP ckmisc_fquantile(SEXP xSEXP, SEXP probsSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(fquantile(x, probs, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// fquantile_byid
NumericMatrix fquantile_byid(NumericVector x, NumericVector q, IntegerVector id);
RcppExport SEXP ckmisc_fquantile_byid(SEXP xSEXP, SEXP qSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(fquantile_byid(x, q, id));
    return rcpp_result_gen;
END_RCPP
}
// QDriskDF
DataFrame QDriskDF(DataFrame df, int surv);
RcppExport SEXP ckmisc_QDriskDF(SEXP dfSEXP, SEXP survSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type surv(survSEXP);
    rcpp_result_gen = Rcpp::wrap(QDriskDF(df, surv));
    return rcpp_result_gen;
END_RCPP
}
// QDrisk
List QDrisk(IntegerVector age, IntegerVector sex, IntegerVector b_corticosteroids, IntegerVector b_treatedhyp, NumericVector bmi, IntegerVector ethrisk, IntegerVector fh_diab, IntegerVector smoke_cat, NumericVector town, int surv);
RcppExport SEXP ckmisc_QDrisk(SEXP ageSEXP, SEXP sexSEXP, SEXP b_corticosteroidsSEXP, SEXP b_treatedhypSEXP, SEXP bmiSEXP, SEXP ethriskSEXP, SEXP fh_diabSEXP, SEXP smoke_catSEXP, SEXP townSEXP, SEXP survSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_corticosteroids(b_corticosteroidsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_treatedhyp(b_treatedhypSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bmi(bmiSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ethrisk(ethriskSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type fh_diab(fh_diabSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type smoke_cat(smoke_catSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type town(townSEXP);
    Rcpp::traits::input_parameter< int >::type surv(survSEXP);
    rcpp_result_gen = Rcpp::wrap(QDrisk(age, sex, b_corticosteroids, b_treatedhyp, bmi, ethrisk, fh_diab, smoke_cat, town, surv));
    return rcpp_result_gen;
END_RCPP
}
// cvd_raw
double cvd_raw(int age, int sex, int b_AF, int b_ra, int b_renal, int b_treatedhyp, int b_type1, int b_type2, double bmi, int ethrisk, int fh_cvd, double rati, double sbp, int smoke_cat, double town);
RcppExport SEXP ckmisc_cvd_raw(SEXP ageSEXP, SEXP sexSEXP, SEXP b_AFSEXP, SEXP b_raSEXP, SEXP b_renalSEXP, SEXP b_treatedhypSEXP, SEXP b_type1SEXP, SEXP b_type2SEXP, SEXP bmiSEXP, SEXP ethriskSEXP, SEXP fh_cvdSEXP, SEXP ratiSEXP, SEXP sbpSEXP, SEXP smoke_catSEXP, SEXP townSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< int >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< int >::type b_AF(b_AFSEXP);
    Rcpp::traits::input_parameter< int >::type b_ra(b_raSEXP);
    Rcpp::traits::input_parameter< int >::type b_renal(b_renalSEXP);
    Rcpp::traits::input_parameter< int >::type b_treatedhyp(b_treatedhypSEXP);
    Rcpp::traits::input_parameter< int >::type b_type1(b_type1SEXP);
    Rcpp::traits::input_parameter< int >::type b_type2(b_type2SEXP);
    Rcpp::traits::input_parameter< double >::type bmi(bmiSEXP);
    Rcpp::traits::input_parameter< int >::type ethrisk(ethriskSEXP);
    Rcpp::traits::input_parameter< int >::type fh_cvd(fh_cvdSEXP);
    Rcpp::traits::input_parameter< double >::type rati(ratiSEXP);
    Rcpp::traits::input_parameter< double >::type sbp(sbpSEXP);
    Rcpp::traits::input_parameter< int >::type smoke_cat(smoke_catSEXP);
    Rcpp::traits::input_parameter< double >::type town(townSEXP);
    rcpp_result_gen = Rcpp::wrap(cvd_raw(age, sex, b_AF, b_ra, b_renal, b_treatedhyp, b_type1, b_type2, bmi, ethrisk, fh_cvd, rati, sbp, smoke_cat, town));
    return rcpp_result_gen;
END_RCPP
}
// QRisk
NumericVector QRisk(IntegerVector age, IntegerVector sex, IntegerVector b_AF, IntegerVector b_ra, IntegerVector b_renal, IntegerVector b_treatedhyp, IntegerVector b_type1, IntegerVector b_type2, NumericVector bmi, IntegerVector ethrisk, IntegerVector fh_cvd, NumericVector rati, NumericVector sbp, IntegerVector smoke_cat, NumericVector town);
RcppExport SEXP ckmisc_QRisk(SEXP ageSEXP, SEXP sexSEXP, SEXP b_AFSEXP, SEXP b_raSEXP, SEXP b_renalSEXP, SEXP b_treatedhypSEXP, SEXP b_type1SEXP, SEXP b_type2SEXP, SEXP bmiSEXP, SEXP ethriskSEXP, SEXP fh_cvdSEXP, SEXP ratiSEXP, SEXP sbpSEXP, SEXP smoke_catSEXP, SEXP townSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_AF(b_AFSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_ra(b_raSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_renal(b_renalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_treatedhyp(b_treatedhypSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_type1(b_type1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b_type2(b_type2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bmi(bmiSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ethrisk(ethriskSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type fh_cvd(fh_cvdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rati(ratiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sbp(sbpSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type smoke_cat(smoke_catSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type town(townSEXP);
    rcpp_result_gen = Rcpp::wrap(QRisk(age, sex, b_AF, b_ra, b_renal, b_treatedhyp, b_type1, b_type2, bmi, ethrisk, fh_cvd, rati, sbp, smoke_cat, town));
    return rcpp_result_gen;
END_RCPP
}
// fbound
NumericVector fbound(NumericVector x, float a, float b);
RcppExport SEXP ckmisc_fbound(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type a(aSEXP);
    Rcpp::traits::input_parameter< float >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fbound(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fbound_inplace
NumericVector fbound_inplace(NumericVector x, float a, float b);
RcppExport SEXP ckmisc_fbound_inplace(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type a(aSEXP);
    Rcpp::traits::input_parameter< float >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fbound_inplace(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fbound_inplace_int
IntegerVector fbound_inplace_int(IntegerVector x, int a, int b);
RcppExport SEXP ckmisc_fbound_inplace_int(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fbound_inplace_int(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fequal
LogicalVector fequal(NumericVector x, double tol);
RcppExport SEXP ckmisc_fequal(SEXP xSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fequal(x, tol));
    return rcpp_result_gen;
END_RCPP
}
// fnormalise
NumericVector fnormalise(NumericVector x);
RcppExport SEXP ckmisc_fnormalise(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fnormalise(x));
    return rcpp_result_gen;
END_RCPP
}
// fcompress
NumericVector fcompress(NumericVector x, float limit);
RcppExport SEXP ckmisc_fcompress(SEXP xSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type limit(limitSEXP);
    rcpp_result_gen = Rcpp::wrap(fcompress(x, limit));
    return rcpp_result_gen;
END_RCPP
}
// count_if
int count_if(LogicalVector x);
RcppExport SEXP ckmisc_count_if(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(count_if(x));
    return rcpp_result_gen;
END_RCPP
}
// prop_if
double prop_if(LogicalVector x, bool na_rm);
RcppExport SEXP ckmisc_prop_if(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(prop_if(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// df2mat_numeric
NumericMatrix df2mat_numeric(DataFrame x);
RcppExport SEXP ckmisc_df2mat_numeric(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(df2mat_numeric(x));
    return rcpp_result_gen;
END_RCPP
}
// df2mat_integer
IntegerMatrix df2mat_integer(DataFrame x);
RcppExport SEXP ckmisc_df2mat_integer(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(df2mat_integer(x));
    return rcpp_result_gen;
END_RCPP
}
// tableRcpp
IntegerVector tableRcpp(SEXP x);
RcppExport SEXP ckmisc_tableRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tableRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// counts
IntegerVector counts(SEXP x);
RcppExport SEXP ckmisc_counts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(counts(x));
    return rcpp_result_gen;
END_RCPP
}
// counts_DF
Rcpp::DataFrame counts_DF(SEXP x);
RcppExport SEXP ckmisc_counts_DF(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(counts_DF(x));
    return rcpp_result_gen;
END_RCPP
}
// roll_mean
NumericVector roll_mean(NumericVector dat, int window);
RcppExport SEXP ckmisc_roll_mean(SEXP datSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_mean(dat, window));
    return rcpp_result_gen;
END_RCPP
}
// simsmokDF
DataFrame simsmokDF(DataFrame df, NumericMatrix pr_relap, int relap_cutoff);
RcppExport SEXP ckmisc_simsmokDF(SEXP dfSEXP, SEXP pr_relapSEXP, SEXP relap_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pr_relap(pr_relapSEXP);
    Rcpp::traits::input_parameter< int >::type relap_cutoff(relap_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(simsmokDF(df, pr_relap, relap_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// simsmok
DataFrame simsmok(IntegerVector cigst1, NumericVector pr_init, NumericVector pr_cess, NumericVector dice, IntegerVector id, IntegerVector age, IntegerVector sex, IntegerVector qimd, IntegerVector endsmoke, IntegerVector smokyrs, NumericVector cigdyal, NumericVector numsmok, IntegerVector year, NumericVector cigdyal_rank, NumericMatrix pr_relap, int relap_cutoff);
RcppExport SEXP ckmisc_simsmok(SEXP cigst1SEXP, SEXP pr_initSEXP, SEXP pr_cessSEXP, SEXP diceSEXP, SEXP idSEXP, SEXP ageSEXP, SEXP sexSEXP, SEXP qimdSEXP, SEXP endsmokeSEXP, SEXP smokyrsSEXP, SEXP cigdyalSEXP, SEXP numsmokSEXP, SEXP yearSEXP, SEXP cigdyal_rankSEXP, SEXP pr_relapSEXP, SEXP relap_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cigst1(cigst1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pr_init(pr_initSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pr_cess(pr_cessSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dice(diceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type qimd(qimdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type endsmoke(endsmokeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type smokyrs(smokyrsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cigdyal(cigdyalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type numsmok(numsmokSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cigdyal_rank(cigdyal_rankSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pr_relap(pr_relapSEXP);
    Rcpp::traits::input_parameter< int >::type relap_cutoff(relap_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(simsmok(cigst1, pr_init, pr_cess, dice, id, age, sex, qimd, endsmoke, smokyrs, cigdyal, numsmok, year, cigdyal_rank, pr_relap, relap_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// numsmok_fix
NumericVector numsmok_fix(IntegerVector cigst1, IntegerVector id, NumericVector cigdyal, NumericVector numsmok);
RcppExport SEXP ckmisc_numsmok_fix(SEXP cigst1SEXP, SEXP idSEXP, SEXP cigdyalSEXP, SEXP numsmokSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type cigst1(cigst1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cigdyal(cigdyalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type numsmok(numsmokSEXP);
    rcpp_result_gen = Rcpp::wrap(numsmok_fix(cigst1, id, cigdyal, numsmok));
    return rcpp_result_gen;
END_RCPP
}
// shift_byidNum
NumericVector shift_byidNum(NumericVector x, int lag, float replace, IntegerVector id);
RcppExport SEXP ckmisc_shift_byidNum(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< float >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_byidNum(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_byidInt
IntegerVector shift_byidInt(IntegerVector x, int lag, int replace, IntegerVector id);
RcppExport SEXP ckmisc_shift_byidInt(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_byidInt(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// shift_byidStr
StringVector shift_byidStr(CharacterVector x, int lag, std::string replace, IntegerVector id);
RcppExport SEXP ckmisc_shift_byidStr(SEXP xSEXP, SEXP lagSEXP, SEXP replaceSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< std::string >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(shift_byidStr(x, lag, replace, id));
    return rcpp_result_gen;
END_RCPP
}
// incidence_events
DataFrame incidence_events(IntegerVector diab, NumericVector pr_diab_cvd, NumericVector pr_diab_nocvd, NumericVector dice_diab_inc, IntegerVector chd, NumericVector pr_chd_inc, NumericVector chd_diab_rr, NumericVector dice_chd_inc, IntegerVector stroke, NumericVector pr_stroke_inc, NumericVector stroke_diab_rr, NumericVector dice_stroke_inc, IntegerVector id, IntegerVector year, int lag);
RcppExport SEXP ckmisc_incidence_events(SEXP diabSEXP, SEXP pr_diab_cvdSEXP, SEXP pr_diab_nocvdSEXP, SEXP dice_diab_incSEXP, SEXP chdSEXP, SEXP pr_chd_incSEXP, SEXP chd_diab_rrSEXP, SEXP dice_chd_incSEXP, SEXP strokeSEXP, SEXP pr_stroke_incSEXP, SEXP stroke_diab_rrSEXP, SEXP dice_stroke_incSEXP, SEXP idSEXP, SEXP yearSEXP, SEXP lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type diab(diabSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pr_diab_cvd(pr_diab_cvdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pr_diab_nocvd(pr_diab_nocvdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dice_diab_inc(dice_diab_incSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type chd(chdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pr_chd_inc(pr_chd_incSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type chd_diab_rr(chd_diab_rrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dice_chd_inc(dice_chd_incSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type stroke(strokeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pr_stroke_inc(pr_stroke_incSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stroke_diab_rr(stroke_diab_rrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dice_stroke_inc(dice_stroke_incSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    rcpp_result_gen = Rcpp::wrap(incidence_events(diab, pr_diab_cvd, pr_diab_nocvd, dice_diab_inc, chd, pr_chd_inc, chd_diab_rr, dice_chd_inc, stroke, pr_stroke_inc, stroke_diab_rr, dice_stroke_inc, id, year, lag));
    return rcpp_result_gen;
END_RCPP
}
// mortality_events
IntegerVector mortality_events(NumericVector px_disease, NumericVector px_disease_dice, IntegerVector id, int code);
RcppExport SEXP ckmisc_mortality_events(SEXP px_diseaseSEXP, SEXP px_disease_diceSEXP, SEXP idSEXP, SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type px_disease(px_diseaseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type px_disease_dice(px_disease_diceSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(mortality_events(px_disease, px_disease_dice, id, code));
    return rcpp_result_gen;
END_RCPP
}
// collect_output
List collect_output(IntegerMatrix x1, IntegerMatrix x2, IntegerMatrix x3, IntegerMatrix x4, IntegerMatrix x5, IntegerMatrix x6, IntegerMatrix x7, IntegerMatrix a0, NumericMatrix a1, NumericMatrix a2, IntegerMatrix a3, NumericMatrix a4);
RcppExport SEXP ckmisc_collect_output(SEXP x1SEXP, SEXP x2SEXP, SEXP x3SEXP, SEXP x4SEXP, SEXP x5SEXP, SEXP x6SEXP, SEXP x7SEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP a3SEXP, SEXP a4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x3(x3SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x4(x4SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x5(x5SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x6(x6SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x7(x7SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a4(a4SEXP);
    rcpp_result_gen = Rcpp::wrap(collect_output(x1, x2, x3, x4, x5, x6, x7, a0, a1, a2, a3, a4));
    return rcpp_result_gen;
END_RCPP
}
// HC_coverage
IntegerVector HC_coverage(IntegerVector id, NumericVector coverage, NumericVector dice);
RcppExport SEXP ckmisc_HC_coverage(SEXP idSEXP, SEXP coverageSEXP, SEXP diceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coverage(coverageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dice(diceSEXP);
    rcpp_result_gen = Rcpp::wrap(HC_coverage(id, coverage, dice));
    return rcpp_result_gen;
END_RCPP
}
// HC_effect
IntegerVector HC_effect(IntegerVector id, IntegerVector participated, IntegerVector invited);
RcppExport SEXP ckmisc_HC_effect(SEXP idSEXP, SEXP participatedSEXP, SEXP invitedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type participated(participatedSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type invited(invitedSEXP);
    rcpp_result_gen = Rcpp::wrap(HC_effect(id, participated, invited));
    return rcpp_result_gen;
END_RCPP
}
// med_effect
IntegerVector med_effect(IntegerVector id, IntegerVector med_taken, IntegerVector participation_effect);
RcppExport SEXP ckmisc_med_effect(SEXP idSEXP, SEXP med_takenSEXP, SEXP participation_effectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type med_taken(med_takenSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type participation_effect(participation_effectSEXP);
    rcpp_result_gen = Rcpp::wrap(med_effect(id, med_taken, participation_effect));
    return rcpp_result_gen;
END_RCPP
}
// bariatricsurg_effect
NumericVector bariatricsurg_effect(IntegerVector id, NumericVector bmi, IntegerVector behav_effect, IntegerVector participated);
RcppExport SEXP ckmisc_bariatricsurg_effect(SEXP idSEXP, SEXP bmiSEXP, SEXP behav_effectSEXP, SEXP participatedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bmi(bmiSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type behav_effect(behav_effectSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type participated(participatedSEXP);
    rcpp_result_gen = Rcpp::wrap(bariatricsurg_effect(id, bmi, behav_effect, participated));
    return rcpp_result_gen;
END_RCPP
}
// smokclinic_effect
IntegerVector smokclinic_effect(IntegerVector id, IntegerVector cigst1, IntegerVector behav_effect, IntegerVector participated);
RcppExport SEXP ckmisc_smokclinic_effect(SEXP idSEXP, SEXP cigst1SEXP, SEXP behav_effectSEXP, SEXP participatedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cigst1(cigst1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type behav_effect(behav_effectSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type participated(participatedSEXP);
    rcpp_result_gen = Rcpp::wrap(smokclinic_effect(id, cigst1, behav_effect, participated));
    return rcpp_result_gen;
END_RCPP
}
// predict_svylr
Rcpp::IntegerVector predict_svylr(arma::mat x, arma::uword e, arma::vec y, arma::rowvec z, arma::vec rank);
RcppExport SEXP ckmisc_predict_svylr(SEXP xSEXP, SEXP eSEXP, SEXP ySEXP, SEXP zSEXP, SEXP rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rank(rankSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_svylr(x, e, y, z, rank));
    return rcpp_result_gen;
END_RCPP
}
